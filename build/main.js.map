{
  "version": 3,
  "sources": ["../src/utils/client.ts", "../src/example-1/decoder.ts", "../src/example-1/index.ts", "../src/main.ts"],
  "sourcesContent": ["import {\n  dot,\n  rococo,\n} from '@polkadot-api/descriptors';\nimport { chainSpec as polkadotChainSpec } from 'polkadot-api/chains/polkadot';\nimport { chainSpec as rococoChainSpec } from 'polkadot-api/chains/rococo_v2_2';\n\nimport { createClient } from 'polkadot-api';\nimport { start } from \"polkadot-api/smoldot\";\nimport { getSmProvider } from 'polkadot-api/sm-provider';\n\nimport { WebSocketProvider } from 'polkadot-api/ws-provider/node'\nimport { getObservableClient } from '@polkadot-api/observable-client'\nimport { createClient as createSubstrateClient } from '@polkadot-api/substrate-client'\n\n// web imports for worker\n// import { startFromWorker } from \"polkadot-api/smoldot/from-worker\";\n// import SmWorker from \"polkadot-api/smoldot/worker?worker\";\n\nexport const createLightClient = async () => {\n  // usage in web\n  // const smoldot = startFromWorker(new SmWorker());\n  const smoldot = start();\n\n  const chain = await smoldot.addChain({\n    // chainSpec: rococoChainSpec,\n    // or any other well known chainSpec\n    chainSpec: polkadotChainSpec,\n  });\n\n  const client = createClient(\n    getSmProvider(chain),\n  );\n\n  const api = client.getTypedApi(dot);\n\n  return { client, api }\n}\n\nexport const createFullClient = async () => {\n  // for more endpoints you can look in here https://github.com/polkadot-js/apps/tree/master/packages/apps-config/src/endpoints\n  const rawClient = createSubstrateClient(WebSocketProvider('wss://polkadot-rpc.publicnode.com'));\n  const client = getObservableClient(rawClient);\n\n  return { rawClient, client }\n}\n", "import {\n  Bytes,\n  Codec,\n  CodecType,\n  Option,\n  ScaleEnum,\n  Struct,\n  Tuple,\n  V15,\n  Vector,\n  _void,\n  bool,\n  compact,\n  compactNumber,\n  enhanceDecoder,\n  createCodec,\n  enhanceCodec,\n  createDecoder,\n  str,\n  u16,\n  u32,\n  u8,\n} from \"@polkadot-api/substrate-bindings\"\n\nimport { Enum } from \"scale-ts\"\n\nfunction trailingZeroes(x) {\n  if (x === 0) return 0;\n  let count = 0;\n  while ((x & 1) === 0) {\n    count++;\n    x >>= 1; // Divide by 2\n  }\n  return count;\n}\nconst $version = enhanceCodec(\n  u8,\n  (value) => (+!!value.signed << 7) | value.version,\n  (value) => ({\n    version: value & ~(1 << 7),\n    signed: !!(value & (1 << 7)),\n  }),\n)\nconst $multiAddress = Bytes(32);\n\nconst $multiSignature = Enum({\n  0: Bytes(64), // Ed25519\n  1: Bytes(64), // Sr25519\n  2: Bytes(65), // Ecdsa\n});\n\nconst $mortal = enhanceCodec(\n  Bytes(2),\n  (value) => {\n    const factor = Math.max(value.period >> 12, 1)\n    const left = Math.min(Math.max(trailingZeroes(value.period) - 1, 1), 15)\n    const right = (value.phase / factor) << 4\n    return u16.enc(left | right)\n  },\n  (value) => {\n    const enc = u16.dec(value)\n    const period = 2 << enc % (1 << 4)\n    const factor = Math.max(period >> 12, 1)\n    const phase = (enc >> 4) * factor\n    return { type: \"mortal\", period, phase }\n  },\n)\n\nconst $mortality = createCodec(\n  (value) => (value.type === \"inmortal\" ? u8.enc(0) : $mortal.enc(value)),\n  createDecoder((value) => {\n    const firstByte = u8.dec(value)\n    if (firstByte === 0) return { type: \"inmortal\" }\n    const secondByte = u8.dec(value)\n    console.log({ firstByte, secondByte })\n    return $mortal.dec(Uint8Array.from([firstByte, secondByte]))\n  }),\n)\n\nconst $extra = Struct({\n  mortality: $mortality,\n  nonce: compact,\n  tip: compact,\n})\n\nconst $call = Struct({\n  module: u8,\n  method: u8,\n  // for a balances.transferKeepAlive(dest, value) arguments\n  args: Struct({\n    // dest: Bytes(32),\n    value: compact,\n  }),\n})\n\nconst $extrinsic = Struct({\n  version: $version,\n  // v4 Body\n  body: Struct({\n    sender: $multiAddress,\n    // signature: $multiSignature,\n    extra: $extra,\n    call: $call,\n  }),\n})\n\nexport const $opaqueExtrinsic = enhanceCodec(Bytes(), $extrinsic.enc, $extrinsic.dec)\n", "import { createFullClient } from \"@utils/client\";\nimport { $opaqueExtrinsic } from \"./decoder\"\n\nconst example = async () => {\n  const { rawClient, client } = await createFullClient()\n  const historicBlockHash = '0x1847c19c9707baf1f1d0412abc7da57b68abca883d44da46e80870fda29e5e73'\n\n  // RPC methods docs can be found here https://polkadot.js.org/docs/polkadot/rpc\n\n  //get the block\n  const historicBlock = await rawClient.request('chain_getBlock', [historicBlockHash])\n\n  const blockExtrinsics = historicBlock.block.extrinsics\n\n  //decode the extrinsic\n  const data = $opaqueExtrinsic.dec(blockExtrinsics[1])\n\n  console.log('Decoded data', data)\n};\n\nexport default example;\n", "const args = process.argv.slice(2);\nconst example = args[0];\n\nconst examplesMap: Record<string, () => Promise<any>> = {\n  \"1\": () => import(\"./example-1\"),\n};\n\nif (example in examplesMap) {\n  examplesMap[example]()\n    .then((module) => {\n      // Access the default export or specific exports\n      if (module.default) {\n        module.default();\n      } else {\n        console.log(\"Module loaded:\", module);\n      }\n    })\n    .catch((err: Error) => {\n      console.error(\"Error loading module:\", err);\n    });\n} else {\n  console.log(\"Invalid example number. Please provide a valid number (1, 2).\");\n}\n"],
  "mappings": "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",
  "names": ["example"]
}
